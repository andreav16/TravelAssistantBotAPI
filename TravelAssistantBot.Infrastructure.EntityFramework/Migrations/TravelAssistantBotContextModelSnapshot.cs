// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelAssistantBot.Infrastructure.EntityFramework;

#nullable disable

namespace TravelAssistantBot.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(TravelAssistantBotContext))]
    partial class TravelAssistantBotContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.8");

            modelBuilder.Entity("TravelAssistantBot.Core.Entities.FlightEntities.Airline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FlightId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IATA")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Airlines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FlightId = 1,
                            IATA = "AA",
                            Name = "American Airlines"
                        },
                        new
                        {
                            Id = 2,
                            FlightId = 2,
                            IATA = "5D",
                            Name = "AeroMexico Connect"
                        },
                        new
                        {
                            Id = 3,
                            FlightId = 3,
                            IATA = "CM",
                            Name = "Copa Airlines"
                        },
                        new
                        {
                            Id = 4,
                            FlightId = 4,
                            IATA = "AV",
                            Name = "SA AVIANCA"
                        },
                        new
                        {
                            Id = 5,
                            FlightId = 5,
                            IATA = "NK",
                            Name = "Spirit Airlines"
                        },
                        new
                        {
                            Id = 6,
                            FlightId = 6,
                            IATA = "AA",
                            Name = "American Airlines"
                        },
                        new
                        {
                            Id = 7,
                            FlightId = 7,
                            IATA = "AF",
                            Name = "Air France"
                        });
                });

            modelBuilder.Entity("TravelAssistantBot.Core.Entities.FlightEntities.Arrival", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Actual")
                        .HasColumnType("TEXT");

                    b.Property<string>("Airport")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Delay")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Estimated")
                        .HasColumnType("TEXT");

                    b.Property<int>("FlightId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Gate")
                        .HasColumnType("TEXT");

                    b.Property<string>("IATA")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Scheduled")
                        .HasColumnType("TEXT");

                    b.Property<string>("Terminal")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Arrivals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Actual = new DateTime(2023, 6, 25, 10, 59, 8, 787, DateTimeKind.Local).AddTicks(9242),
                            Airport = "Miami International Airport",
                            Delay = "43",
                            Estimated = new DateTime(2023, 6, 23, 11, 38, 0, 0, DateTimeKind.Local),
                            FlightId = 1,
                            Gate = "D6",
                            IATA = "MIA",
                            Scheduled = new DateTime(2023, 6, 23, 11, 38, 0, 0, DateTimeKind.Local),
                            Terminal = "N"
                        },
                        new
                        {
                            Id = 2,
                            Actual = new DateTime(2023, 6, 23, 8, 10, 0, 0, DateTimeKind.Local),
                            Airport = "Internacional Benito Juarez",
                            Delay = "",
                            Estimated = new DateTime(2023, 6, 23, 8, 23, 0, 0, DateTimeKind.Local),
                            FlightId = 2,
                            Gate = "P",
                            IATA = "MEX",
                            Scheduled = new DateTime(2023, 6, 23, 8, 23, 0, 0, DateTimeKind.Local),
                            Terminal = "2"
                        },
                        new
                        {
                            Id = 3,
                            Actual = new DateTime(2023, 6, 23, 11, 10, 0, 0, DateTimeKind.Local),
                            Airport = "Tocumen International",
                            Delay = "8",
                            Estimated = new DateTime(2023, 6, 23, 11, 3, 0, 0, DateTimeKind.Local),
                            FlightId = 3,
                            Gate = "103",
                            IATA = "PTY",
                            Scheduled = new DateTime(2023, 6, 23, 11, 3, 0, 0, DateTimeKind.Local),
                            Terminal = "1"
                        },
                        new
                        {
                            Id = 4,
                            Actual = new DateTime(2023, 6, 23, 10, 52, 0, 0, DateTimeKind.Local),
                            Airport = "El Salvador International",
                            Delay = "",
                            Estimated = new DateTime(2023, 6, 23, 11, 0, 0, 0, DateTimeKind.Local),
                            FlightId = 4,
                            Gate = "",
                            IATA = "SAL",
                            Scheduled = new DateTime(2023, 6, 23, 11, 0, 0, 0, DateTimeKind.Local),
                            Terminal = "E"
                        },
                        new
                        {
                            Id = 5,
                            Actual = new DateTime(2023, 6, 25, 10, 59, 8, 787, DateTimeKind.Local).AddTicks(9480),
                            Airport = "Logan International",
                            Delay = "",
                            Estimated = new DateTime(2023, 6, 24, 3, 38, 0, 0, DateTimeKind.Local),
                            FlightId = 5,
                            Gate = "",
                            IATA = "BOS",
                            Scheduled = new DateTime(2023, 6, 24, 3, 38, 0, 0, DateTimeKind.Local),
                            Terminal = "B"
                        },
                        new
                        {
                            Id = 6,
                            Actual = new DateTime(2023, 6, 25, 10, 59, 8, 787, DateTimeKind.Local).AddTicks(9521),
                            Airport = "John F Kennedy International",
                            Delay = "",
                            Estimated = new DateTime(2023, 6, 24, 4, 52, 0, 0, DateTimeKind.Local),
                            FlightId = 6,
                            Gate = "1",
                            IATA = "JFK",
                            Scheduled = new DateTime(2023, 6, 24, 4, 52, 0, 0, DateTimeKind.Local),
                            Terminal = "8"
                        },
                        new
                        {
                            Id = 7,
                            Actual = new DateTime(2023, 6, 25, 10, 59, 8, 787, DateTimeKind.Local).AddTicks(9560),
                            Airport = "Charles De Gaulle",
                            Delay = "",
                            Estimated = new DateTime(2023, 6, 24, 8, 15, 0, 0, DateTimeKind.Local),
                            FlightId = 7,
                            Gate = "",
                            IATA = "CDG",
                            Scheduled = new DateTime(2023, 6, 24, 8, 15, 0, 0, DateTimeKind.Local),
                            Terminal = "2E"
                        });
                });

            modelBuilder.Entity("TravelAssistantBot.Core.Entities.FlightEntities.Departure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Actual")
                        .HasColumnType("TEXT");

                    b.Property<string>("Airport")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Delay")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Estimated")
                        .HasColumnType("TEXT");

                    b.Property<int>("FlightId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Gate")
                        .HasColumnType("TEXT");

                    b.Property<string>("IATA")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Scheduled")
                        .HasColumnType("TEXT");

                    b.Property<string>("Terminal")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Departures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Actual = new DateTime(2023, 6, 23, 8, 30, 0, 0, DateTimeKind.Local),
                            Airport = "Ramon Villeda Morales International",
                            Delay = "76",
                            Estimated = new DateTime(2023, 6, 23, 7, 14, 0, 0, DateTimeKind.Local),
                            FlightId = 1,
                            Gate = "",
                            IATA = "SAP",
                            Scheduled = new DateTime(2023, 6, 23, 7, 14, 0, 0, DateTimeKind.Local),
                            Terminal = ""
                        },
                        new
                        {
                            Id = 2,
                            Actual = new DateTime(2023, 6, 23, 6, 14, 0, 0, DateTimeKind.Local),
                            Airport = "Ramon Villeda Morales International",
                            Delay = "15",
                            Estimated = new DateTime(2023, 6, 23, 6, 0, 0, 0, DateTimeKind.Local),
                            FlightId = 2,
                            Gate = "",
                            IATA = "SAP",
                            Scheduled = new DateTime(2023, 6, 23, 6, 0, 0, 0, DateTimeKind.Local),
                            Terminal = ""
                        },
                        new
                        {
                            Id = 3,
                            Actual = new DateTime(2023, 6, 23, 8, 26, 0, 0, DateTimeKind.Local),
                            Airport = "Ramon Villeda Morales International",
                            Delay = "36",
                            Estimated = new DateTime(2023, 6, 23, 7, 51, 0, 0, DateTimeKind.Local),
                            FlightId = 3,
                            Gate = "5",
                            IATA = "SAP",
                            Scheduled = new DateTime(2023, 6, 23, 7, 51, 0, 0, DateTimeKind.Local),
                            Terminal = ""
                        },
                        new
                        {
                            Id = 4,
                            Actual = new DateTime(2023, 6, 23, 10, 23, 0, 0, DateTimeKind.Local),
                            Airport = "Ramon Villeda Morales International",
                            Delay = "8",
                            Estimated = new DateTime(2023, 6, 23, 10, 15, 0, 0, DateTimeKind.Local),
                            FlightId = 4,
                            Gate = "",
                            IATA = "SAP",
                            Scheduled = new DateTime(2023, 6, 23, 10, 15, 0, 0, DateTimeKind.Local),
                            Terminal = ""
                        },
                        new
                        {
                            Id = 5,
                            Actual = new DateTime(2023, 6, 25, 10, 59, 8, 787, DateTimeKind.Local).AddTicks(9466),
                            Airport = "Miami International Airport",
                            Delay = "",
                            Estimated = new DateTime(2023, 6, 24, 0, 10, 0, 0, DateTimeKind.Local),
                            FlightId = 5,
                            Gate = "G12",
                            IATA = "MIA",
                            Scheduled = new DateTime(2023, 6, 24, 0, 10, 0, 0, DateTimeKind.Local),
                            Terminal = "C"
                        },
                        new
                        {
                            Id = 6,
                            Actual = new DateTime(2023, 6, 25, 10, 59, 8, 787, DateTimeKind.Local).AddTicks(9512),
                            Airport = "Miami International Airport",
                            Delay = "",
                            Estimated = new DateTime(2023, 6, 24, 1, 50, 0, 0, DateTimeKind.Local),
                            FlightId = 6,
                            Gate = "D32",
                            IATA = "MIA",
                            Scheduled = new DateTime(2023, 6, 24, 1, 50, 0, 0, DateTimeKind.Local),
                            Terminal = "N"
                        },
                        new
                        {
                            Id = 7,
                            Actual = new DateTime(2023, 6, 23, 17, 52, 0, 0, DateTimeKind.Local),
                            Airport = "Miami International Airport",
                            Delay = "33",
                            Estimated = new DateTime(2023, 6, 23, 17, 20, 0, 0, DateTimeKind.Local),
                            FlightId = 7,
                            Gate = "J18",
                            IATA = "MIA",
                            Scheduled = new DateTime(2023, 6, 23, 17, 20, 0, 0, DateTimeKind.Local),
                            Terminal = "S"
                        });
                });

            modelBuilder.Entity("TravelAssistantBot.Core.Entities.FlightEntities.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Aircraft")
                        .HasColumnType("TEXT");

                    b.Property<int>("AirlineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArrivalId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartureId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FlightDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("FlightInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FlightStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Live")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId")
                        .IsUnique();

                    b.HasIndex("DepartureId")
                        .IsUnique();

                    b.HasIndex("FlightInfoId")
                        .IsUnique();

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Aircraft = "",
                            AirlineId = 1,
                            ArrivalId = 1,
                            DepartureId = 1,
                            FlightDate = new DateTime(2023, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightInfoId = 1,
                            FlightStatus = "scheduled",
                            Live = ""
                        },
                        new
                        {
                            Id = 2,
                            Aircraft = "",
                            AirlineId = 2,
                            ArrivalId = 2,
                            DepartureId = 2,
                            FlightDate = new DateTime(2023, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightInfoId = 2,
                            FlightStatus = "landed",
                            Live = ""
                        },
                        new
                        {
                            Id = 3,
                            Aircraft = "",
                            AirlineId = 3,
                            ArrivalId = 3,
                            DepartureId = 3,
                            FlightDate = new DateTime(2023, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightInfoId = 3,
                            FlightStatus = "landed",
                            Live = ""
                        },
                        new
                        {
                            Id = 4,
                            Aircraft = "",
                            AirlineId = 4,
                            ArrivalId = 4,
                            DepartureId = 4,
                            FlightDate = new DateTime(2023, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightInfoId = 4,
                            FlightStatus = "landed",
                            Live = ""
                        },
                        new
                        {
                            Id = 5,
                            Aircraft = "",
                            AirlineId = 5,
                            ArrivalId = 5,
                            DepartureId = 5,
                            FlightDate = new DateTime(2023, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightInfoId = 5,
                            FlightStatus = "scheduled",
                            Live = ""
                        },
                        new
                        {
                            Id = 6,
                            Aircraft = "",
                            AirlineId = 6,
                            ArrivalId = 6,
                            DepartureId = 6,
                            FlightDate = new DateTime(2023, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightInfoId = 6,
                            FlightStatus = "scheduled",
                            Live = ""
                        },
                        new
                        {
                            Id = 7,
                            Aircraft = "",
                            AirlineId = 7,
                            ArrivalId = 7,
                            DepartureId = 7,
                            FlightDate = new DateTime(2023, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightInfoId = 7,
                            FlightStatus = "active",
                            Live = ""
                        });
                });

            modelBuilder.Entity("TravelAssistantBot.Core.Entities.FlightEntities.FlightInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FlightId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IATA")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FlightInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FlightId = 1,
                            IATA = "AA1312",
                            Number = "1312"
                        },
                        new
                        {
                            Id = 2,
                            FlightId = 2,
                            IATA = "5D675",
                            Number = "675"
                        },
                        new
                        {
                            Id = 3,
                            FlightId = 3,
                            IATA = "CM287",
                            Number = "287"
                        },
                        new
                        {
                            Id = 4,
                            FlightId = 4,
                            IATA = "AV537",
                            Number = "537"
                        },
                        new
                        {
                            Id = 5,
                            FlightId = 5,
                            IATA = "NK3121",
                            Number = "3121"
                        },
                        new
                        {
                            Id = 6,
                            FlightId = 6,
                            IATA = "AA315",
                            Number = "315"
                        },
                        new
                        {
                            Id = 7,
                            FlightId = 7,
                            IATA = "AF97",
                            Number = "97"
                        });
                });

            modelBuilder.Entity("TravelAssistantBot.Core.Entities.FlightEntities.Flight", b =>
                {
                    b.HasOne("TravelAssistantBot.Core.Entities.FlightEntities.Airline", "Airline")
                        .WithOne("Flight")
                        .HasForeignKey("TravelAssistantBot.Core.Entities.FlightEntities.Flight", "AirlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelAssistantBot.Core.Entities.FlightEntities.Arrival", "Arrival")
                        .WithOne("Flight")
                        .HasForeignKey("TravelAssistantBot.Core.Entities.FlightEntities.Flight", "DepartureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelAssistantBot.Core.Entities.FlightEntities.Departure", "Departure")
                        .WithOne("Flight")
                        .HasForeignKey("TravelAssistantBot.Core.Entities.FlightEntities.Flight", "DepartureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelAssistantBot.Core.Entities.FlightEntities.FlightInfo", "FlightInfo")
                        .WithOne("Flight")
                        .HasForeignKey("TravelAssistantBot.Core.Entities.FlightEntities.Flight", "FlightInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airline");

                    b.Navigation("Arrival");

                    b.Navigation("Departure");

                    b.Navigation("FlightInfo");
                });

            modelBuilder.Entity("TravelAssistantBot.Core.Entities.FlightEntities.Airline", b =>
                {
                    b.Navigation("Flight")
                        .IsRequired();
                });

            modelBuilder.Entity("TravelAssistantBot.Core.Entities.FlightEntities.Arrival", b =>
                {
                    b.Navigation("Flight")
                        .IsRequired();
                });

            modelBuilder.Entity("TravelAssistantBot.Core.Entities.FlightEntities.Departure", b =>
                {
                    b.Navigation("Flight")
                        .IsRequired();
                });

            modelBuilder.Entity("TravelAssistantBot.Core.Entities.FlightEntities.FlightInfo", b =>
                {
                    b.Navigation("Flight")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
